<?class user extends model {	private static $ip=NULL;	private static $userAgent=NULL;	private static $key=12;	private static $auth=NULL;	private static $userId=NULL;				static function dbCreate(){		db::getDb()->query(			'CREATE TABLE IF NOT EXISTS `users` (			`id` int(11) NOT NULL AUTO_INCREMENT,			`login` varchar(20) NOT NULL,			`password` varchar(48) NOT NULL,			PRIMARY KEY (`id`),			KEY `login` (`login`)			) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;'		);		db::getDb()->query(			'CREATE TABLE IF NOT EXISTS `privileges` (			`user_id` int(11) NOT NULL,			PRIMARY KEY (`user_id`)			) ENGINE=InnoDB DEFAULT CHARSET=utf8;'		);			}	private function cookieHash($userId,$timestamp){		$str='';		if(self::$ip)$str.=$_SERVER["REMOTE_ADDR"];		if(self::$userAgent)$str.=$_SERVER['HTTP_USER_AGENT'];		$str.=$userId.$timestamp.self::$key;		return md5($str);	}			private function passHash($pass){		return md5(md5($pass).($key+1));	}		static function add($data){		$data=self::filt($data,array('login','password','password2'));		$user= new table('users');				if(!$data['login']){			self::setMessage('Заполните логин');			return false;		}				if(!$data['password']){			self::setMessage('Заполните пароль');			return false;		}		if($data['password']!=$data['password2']){			self::setMessage('Пароли не совпадают');			return false;		}				if(!preg_match("/^[a-zA-Z0-9]{5,}$/i",$data['login']) || !preg_match("/^[a-zA-Z0-9]{5,}$/i",$data['password'])){			self::setMessage('Логин и пароль должны быть не менее 5 символов и / или состоять из латинских букв или цифр');			return false;		}				if($user->where(array('login'=>$data['login']))->get()){			self::setMessage('Логин занят');			return false;		}						unset($data['password2']);		$data['password']=self::passHash($data['password']);				$id=$user->insert($data);		$priv = new table('privileges');		$priv->insert(array('user_id'=>$id));				return true;			}		static function change($id,$data,$priv=false){		$dataUser=self::filt($data,array('password','password2','name'));		$id=(int)$id;				if($dataUser['password']){			if($dataUser['password']!=$dataUser['password2']){				self::setMessage('Пароли не совпадают');				return false;			}						if(preg_match("/^[a-zA-Z0-9]{5,}$/i",$dataUser['password'])){				self::setMessage('Пароль должен быть не менее 5 символов и / или состоять из латинских букв или цифр');				return false;			}			unset($dataUser['password2']);			$dataUser['password']=self::passHash($dataUser['password']);		}						if($dataUser){			$user= new table('users');			$user->update($dataUser,$id);		}								if($priv===true){			$dataPriv=array('del','add');			foreach($dataPriv as $key=>$val){				unset($dataPriv[$key]); 				$dataPriv[$val]=0;				$data[$val]=(int)$data[$val];				if($data[$val])$dataPriv[$val]=$data[$val];			}						$priv= new table('privileges');						$priv->where(array('user_id'=>$id))->update($dataPriv);		}				return true;	}		static function delete($id){		$id=(int)$id;		$user= new table('users');		$user->delete($id);		$priv= new table('privileges');		$priv->where(array('user_id'=>$id))->delete();		return true;	}			static function login($login,$password,$mem=NULL){		$user= new table('users');		if($login && $password && $data=$user->select('id')->where(array('login'=>$login,'password'=>self::passHash($password)))->get()){			$id=$data['id'];			$timestamp=time();			$str=self::cookieHash($id,$timestamp).".".$id.".".$timestamp;			if($mem===NULL){				SetCookie("sessidhash",$str,0,"/");			}else{				SetCookie("sessidhash",$str,time()+360000000,"/");			}			return true;		}else{			return false;		}	}		static function logout(){		setcookie ("sessidhash", "", time() - 3600,"/");		return true;	}		static function isAuth(){		if(self::$auth===false) return false;		if(self::$auth===true) return true;		if(!$_COOKIE['sessidhash']){			self::$auth=false;			return false;		}						$tmp=explode(".",$_COOKIE['sessidhash']);		if($tmp[0]==self::cookieHash($tmp[1],$tmp[2])){			self::$userId=$tmp[1];			self::$auth=true;			return true;		}else{			self::$auth=false;			return false;		}			}		static function getPriv($name,$id=NULL){		if($id===NULL){			if(self::isAuth()){				$priv= new table('privileges');				$data=$priv->where(array('user_id'=>self::$userId))->get();				return $data[$name];			}else{				return 0;			}		}else{			$priv= new table('privileges');			$data=$priv->where(array('user_id'=>$id))->get();			return $data[$name];		}	}		static function getInfo($name,$id=NULL){		if($id===NULL){			if(self::isAuth()){				$priv= new table('users');				$data=$priv->where(array('id'=>self::$userId))->get();				return $data[$name];			}else{				return NULL;			}		}else{			$priv= new table('users');			$data=$priv->where(array('id'=>$id))->get();			return $data[$name];		}	}	}?>